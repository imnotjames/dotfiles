#!/usr/bin/env sh

if [ -d .git/svn  ] && [ x != x"$(ls -A .git/svn/)" ]; then
	TRACKING_BRANCH=`git svn info | grep URL | sed -e 's/.*\/branches\///'`

	# If the tracking branch has 'URL' at the beginning, then the sed wasn't successful and
	# we'll fall back to the svn-remote config option
	if [[ "$TRACKING_BRANCH" =~ URL.* ]]
	then
		TRACKING_BRANCH=`git config --get svn-remote.svn.fetch | sed -e 's/.*:refs\/remotes\///'`
	fi

	TRUNK_HASH=`git rev-list --date-order --max-count=1 "$TRACKING_BRANCH"`
	REV=`git svn find-rev "$TRUNK_HASH"`
else
	TRUNK_HASH='HEAD'
	REV=`git rev-list "$TRUNK_HASH" --count`
fi

git diff --no-prefix $* "$TRUNK_HASH" | \
	sed -u -e "
		# Deleted files have /dev/null as their new path with git diff
		/^deleted file mode [0-9]\{6\}/{
			# Read the next few lines into the pattern space
			N;N;N;N
			# Do a multiline substitution
			s/\n--- \(.*\)\n+++ \/dev\/null/\n--- \1\t(revision $REV)\n+++ \1\t(working copy)/

			# Jump to the end of the script. This skips the next substitution
			b end
		}

		# New files have /dev/null as their original path with git diff
		/^--- \/dev\/null/{
			# Read a line into the pattern space
			N
			# Do a multiline substitution
			s/^--- \/dev\/null\n+++ \(.*\)$/--- \1\t(revision 0)\n+++ \1\t (working copy)/

			# Jump to the end of the script. This skips the next substitution
			b end
		}

		# Find other files
		/^index\s\+[0-9a-f]\+\.\.[0-9a-f]\+\s\+[0-9]\{6\}/{
			# Replace the first line with the separator
			s/.\+/===================================================================/

			# Read two lines into the pattern space
			N;N

			s/^\(=\+\)\n\(.*\)\n\(.*\)/\1\n\2\t(revision $REV)\n\3\t(working copy)/

			# Jump to the end of the script. This skips the next substitution
			b end
		}

		: end

		s/^diff --git [^[:space:]]*/Index:/
	";
