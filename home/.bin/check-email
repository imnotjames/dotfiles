#!/usr/bin/env python3
from smtplib import SMTP, SMTPServerDisconnected, SMTPConnectError
from email.utils import parseaddr
import logging

logger = logging.getLogger('check-email')
logger.setLevel(logging.CRITICAL)

def get_mx_records(domain):
	import subprocess

	process = subprocess.Popen(['nslookup', '-q=mx', domain], stdout=subprocess.PIPE)
	output = process.communicate()[0].decode('utf-8')

	records = []
	for data in output.split("\n"):
		data = data.split()
		if len(data) != 6:
			continue

		if data[0] != domain or data[1] != 'mail' or data[2] != 'exchanger':
			continue

		records.append( ( data[4], data[5] ) )

	return sorted(records, key=lambda r: r[0])

def validate_email(email):
	email = parseaddr(email)[1]
	domain = email.split("@")[-1]

	mx_records = get_mx_records(domain)

	for mx in mx_records:
		logger.debug(u'%s: connecting', mx[1])
		try:
			smtp = SMTP(timeout=10)
			smtp.connect(mx[1])

			status, _ = smtp.helo()

			if status != 250:
				smtp.quit()
				logger.debug(u'%s answer: %s - %s', mx[1], status, _)
				continue
			
			smtp.mail('')
			status, _ = smtp.rcpt(email)
			logger.debug(u'%s answer: %s - %s', mx[1], status, _)
			if status == 250:
				smtp.quit()
				return True

			logger.debug(u'%s answer: %s - %s', mx[1], status, _)
			smtp.quit()
		except SMTPServerDisconnected:  # Server not permits verify user
			logger.debug(u'%s disconected.', mx[1])
		except SMTPConnectError:
			logger.debug(u'Unable to connect to %s.', mx[1])


if __name__ == "__main__":
	logger_handler = logging.StreamHandler()
	logger_handler.setLevel(logging.CRITICAL)
	logger_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

	logger.addHandler(logger_handler)

	import argparse

	parser = argparse.ArgumentParser(description='Check if email addresses are valid and exist.')
	parser.add_argument('email', metavar='email', type=str, nargs='+', help='email addresses to check')
	parser.add_argument('--verbose', '-v', action='count')

	args = parser.parse_args()

	if args.verbose:
		logger_handler.setLevel(logging.DEBUG)
		logger.setLevel(logging.DEBUG)

	valid = {}

	for email in args.email:
		valid[email] = validate_email(email)


	for email, validity in valid.items():
		print("%s is %s" % ( email, 'is valid and exists' if validity else 'not valid'))
